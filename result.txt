lno@0    @0   program  children:[ @1 ]  
lno@2    @1 statement  children:[ @2 @3 @7 @10 @13 @16 @20 ]  stmt: main
lno@2    @2      type  type: void
lno@3    @3 statement  children:[ @4 @5 @6 ]  stmt: decl
lno@3    @4      type  type: int
lno@3    @5  variable  varname: a
lno@3    @6  variable  varname: s
lno@4    @7 statement  children:[ @8 @9 ]  stmt: assign
lno@4    @8  variable  varname: a
lno@4    @9     const  type: int
lno@5    @10 statement  children:[ @11 @12 ]  stmt: assign
lno@5    @11  variable  varname: s
lno@5    @12     const  type: int
lno@6    @13 statement  children:[ @14 @15 ]  stmt: decl
lno@6    @14      type  type: char
lno@6    @15  variable  varname: ch
lno@7    @16 statement  children:[ @17 @18 ]  stmt: scanf
lno@7    @17     const  type: string
lno@7    @18expression  children:[ @19 ]  optype: &
lno@7    @19  variable  varname: ch
lno@7    @20 statement  children:[ @21 @39 @42 @45 @48 @51 ]  stmt: while
lno@8    @21expression  children:[ @22 @29 ]  optype: ||
lno@8    @22expression  children:[ @23 @26 ]  optype: &&
lno@8    @23expression  children:[ @24 @25 ]  optype: >
lno@8    @24  variable  varname: a
lno@8    @25     const  type: int
lno@8    @26expression  children:[ @27 @28 ]  optype: <=
lno@8    @27  variable  varname: a
lno@8    @28     const  type: int
lno@8    @29expression  children:[ @30 @35 ]  optype: &&
lno@8    @30expression  children:[ @31 @34 ]  optype: ==
lno@8    @31expression  children:[ @32 @33 ]  optype: %
lno@8    @32  variable  varname: a
lno@8    @33     const  type: int
lno@8    @34     const  type: int
lno@8    @35expression  children:[ @36 @38 ]  optype: ==
lno@8    @36expression  children:[ @37 ]  optype: !
lno@8    @37  variable  varname: a
lno@8    @38     const  type: int
lno@9    @39 statement  children:[ @40 @41 ]  stmt: assign_sub
lno@9    @40  variable  varname: a
lno@9    @41     const  type: int
lno@10    @42 statement  children:[ @43 @44 ]  stmt: decl
lno@10    @43      type  type: int
lno@10    @44  variable  varname: a
lno@11    @45 statement  children:[ @46 @47 ]  stmt: assign
lno@11    @46  variable  varname: a
lno@11    @47     const  type: int
lno@12    @48 statement  children:[ @49 @50 ]  stmt: assign_add
lno@12    @49  variable  varname: s
lno@12    @50  variable  varname: a
lno@12    @51 statement  children:[ @52 @57 @60 @63 @66 ]  stmt: if
lno@12    @52expression  children:[ @53 @55 ]  optype: <
lno@12    @53expression  children:[ @54 ]  optype: -
lno@13    @54  variable  varname: s
lno@13    @55expression  children:[ @56 ]  optype: -
lno@13    @56     const  type: int
lno@14    @57 statement  children:[ @58 @59 ]  stmt: printf
lno@14    @58     const  type: string
lno@14    @59  variable  varname: s
lno@15    @60 statement  children:[ @61 @62 ]  stmt: decl
lno@15    @61      type  type: int
lno@15    @62  variable  varname: b
lno@16    @63 statement  children:[ @64 @65 ]  stmt: assign
lno@16    @64  variable  varname: b
lno@16    @65     const  type: int
lno@16    @66 statement  children:[ @67 @71 @74 @76 ]  stmt: for
lno@17    @67 statement  children:[ @68 @69 @70 ]  stmt: decl
lno@17    @68      type  type: int
lno@17    @69  variable  varname: i
lno@17    @70     const  type: int
lno@17    @71expression  children:[ @72 @73 ]  optype: <
lno@17    @72  variable  varname: i
lno@17    @73  variable  varname: b
lno@17    @74expression  children:[ @75 ]  optype: ++
lno@17    @75  variable  varname: i
lno@18    @76 statement  children:[ @77 @78 ]  stmt: printf
lno@18    @77     const  type: string
lno@18    @78  variable  varname: i
